// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: proto/thumbnails.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThumbnailsClient is the client API for Thumbnails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailsClient interface {
	Download(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Image, error)
	DownloadAsync(ctx context.Context, opts ...grpc.CallOption) (Thumbnails_DownloadAsyncClient, error)
}

type thumbnailsClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailsClient(cc grpc.ClientConnInterface) ThumbnailsClient {
	return &thumbnailsClient{cc}
}

func (c *thumbnailsClient) Download(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/proto.Thumbnails/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbnailsClient) DownloadAsync(ctx context.Context, opts ...grpc.CallOption) (Thumbnails_DownloadAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Thumbnails_ServiceDesc.Streams[0], "/proto.Thumbnails/DownloadAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &thumbnailsDownloadAsyncClient{stream}
	return x, nil
}

type Thumbnails_DownloadAsyncClient interface {
	Send(*wrapperspb.StringValue) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type thumbnailsDownloadAsyncClient struct {
	grpc.ClientStream
}

func (x *thumbnailsDownloadAsyncClient) Send(m *wrapperspb.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *thumbnailsDownloadAsyncClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThumbnailsServer is the server API for Thumbnails service.
// All implementations must embed UnimplementedThumbnailsServer
// for forward compatibility
type ThumbnailsServer interface {
	Download(context.Context, *wrapperspb.StringValue) (*Image, error)
	DownloadAsync(Thumbnails_DownloadAsyncServer) error
	mustEmbedUnimplementedThumbnailsServer()
}

// UnimplementedThumbnailsServer must be embedded to have forward compatible implementations.
type UnimplementedThumbnailsServer struct {
}

func (UnimplementedThumbnailsServer) Download(context.Context, *wrapperspb.StringValue) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedThumbnailsServer) DownloadAsync(Thumbnails_DownloadAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadAsync not implemented")
}
func (UnimplementedThumbnailsServer) mustEmbedUnimplementedThumbnailsServer() {}

// UnsafeThumbnailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailsServer will
// result in compilation errors.
type UnsafeThumbnailsServer interface {
	mustEmbedUnimplementedThumbnailsServer()
}

func RegisterThumbnailsServer(s grpc.ServiceRegistrar, srv ThumbnailsServer) {
	s.RegisterService(&Thumbnails_ServiceDesc, srv)
}

func _Thumbnails_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailsServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Thumbnails/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailsServer).Download(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbnails_DownloadAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ThumbnailsServer).DownloadAsync(&thumbnailsDownloadAsyncServer{stream})
}

type Thumbnails_DownloadAsyncServer interface {
	Send(*Image) error
	Recv() (*wrapperspb.StringValue, error)
	grpc.ServerStream
}

type thumbnailsDownloadAsyncServer struct {
	grpc.ServerStream
}

func (x *thumbnailsDownloadAsyncServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *thumbnailsDownloadAsyncServer) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Thumbnails_ServiceDesc is the grpc.ServiceDesc for Thumbnails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thumbnails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Thumbnails",
	HandlerType: (*ThumbnailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _Thumbnails_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadAsync",
			Handler:       _Thumbnails_DownloadAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/thumbnails.proto",
}
